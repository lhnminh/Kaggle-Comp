{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "20bdc4ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:13:37.435587Z",
     "iopub.status.busy": "2025-09-15T13:13:37.434328Z",
     "iopub.status.idle": "2025-09-15T13:13:41.431489Z",
     "shell.execute_reply": "2025-09-15T13:13:41.430574Z"
    },
    "papermill": {
     "duration": 4.004141,
     "end_time": "2025-09-15T13:13:41.433360",
     "exception": false,
     "start_time": "2025-09-15T13:13:37.429219",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "from xgboost import XGBRegressor\n",
    "import numpy as np\n",
    "from sklearn.model_selection import KFold, cross_val_score\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f5e80660",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:13:41.439973Z",
     "iopub.status.busy": "2025-09-15T13:13:41.439575Z",
     "iopub.status.idle": "2025-09-15T13:13:43.192379Z",
     "shell.execute_reply": "2025-09-15T13:13:43.191493Z"
    },
    "papermill": {
     "duration": 1.757855,
     "end_time": "2025-09-15T13:13:43.194260",
     "exception": false,
     "start_time": "2025-09-15T13:13:41.436405",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "#Importing Data\n",
    "X_full = pd.read_csv('/kaggle/input/playground-series-s5e9/train.csv', index_col='id')\n",
    "X_test_full = pd.read_csv('/kaggle/input/playground-series-s5e9/test.csv', index_col='id')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "41449b63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:13:43.201488Z",
     "iopub.status.busy": "2025-09-15T13:13:43.201146Z",
     "iopub.status.idle": "2025-09-15T13:13:43.207177Z",
     "shell.execute_reply": "2025-09-15T13:13:43.206275Z"
    },
    "papermill": {
     "duration": 0.011385,
     "end_time": "2025-09-15T13:13:43.208642",
     "exception": false,
     "start_time": "2025-09-15T13:13:43.197257",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def score_dataset(X, y, model=XGBRegressor()):\n",
    "    # Label encoding for categoricals\n",
    "    #\n",
    "    # Label encoding is good for XGBoost and RandomForest, but one-hot\n",
    "    # would be better for models like Lasso or Ridge. The `cat.codes`\n",
    "    # attribute holds the category levels.\n",
    "    for colname in X.select_dtypes([\"category\"]):\n",
    "        X[colname] = X[colname].cat.codes\n",
    "    # Metric for Housing competition is RMSLE (Root Mean Squared Log Error)\n",
    "    log_y = np.log(y)\n",
    "    score = cross_val_score(\n",
    "        model, X, log_y, cv=5, scoring=\"neg_mean_squared_error\",\n",
    "    )\n",
    "    score = -1 * score.mean()\n",
    "    score = np.sqrt(score)\n",
    "    return score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "36ae5e0b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:13:43.215580Z",
     "iopub.status.busy": "2025-09-15T13:13:43.214611Z",
     "iopub.status.idle": "2025-09-15T13:13:43.469715Z",
     "shell.execute_reply": "2025-09-15T13:13:43.468646Z"
    },
    "papermill": {
     "duration": 0.260107,
     "end_time": "2025-09-15T13:13:43.471287",
     "exception": false,
     "start_time": "2025-09-15T13:13:43.211180",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BeatsPerMinute               1.000000\n",
      "MoodScore                    0.007059\n",
      "TrackDurationMs              0.006637\n",
      "RhythmScore                  0.005440\n",
      "VocalContent                 0.004876\n",
      "LivePerformanceLikelihood    0.003471\n",
      "InstrumentalScore            0.001900\n",
      "NewFeat1                    -0.000316\n",
      "AcousticQuality             -0.000820\n",
      "AudioLoudness               -0.003327\n",
      "Energy                      -0.004375\n",
      "Name: BeatsPerMinute, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#X_full.head()\n",
    "'''\n",
    "'RhythmScore'\n",
    "'AudioLoudness'\n",
    "'VocalContent'\n",
    "'AcousticQuality',\n",
    "'InstrumentalScore',\n",
    "'LivePerformanceLikelihood',\n",
    "'MoodScore',\n",
    "'TrackDurationMs',\n",
    "'Energy',\n",
    "'BeatsPerMinute'\n",
    "'''\n",
    "'''\n",
    "remove_cols = [\"MoodScore\", ]\n",
    "\n",
    "X_full.drop([\"MoodScore\"],axis = 1, inplace = True)\n",
    "X_test_full.drop([\"MoodScore\"],axis = 1, inplace = True)'''\n",
    "\n",
    "\n",
    "X_full[\"NewFeat1\"] = X_full[\"RhythmScore\"] * X_full[\"Energy\"] * X_full[\"AudioLoudness\"]\n",
    "X_test_full[\"NewFeat1\"] = X_test_full[\"RhythmScore\"] * X_test_full[\"Energy\"] * X_test_full[\"AudioLoudness\"]\n",
    "\n",
    "corr = X_full.corr()\n",
    "print(corr['BeatsPerMinute'].sort_values(ascending=False))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5152f114",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:13:43.478217Z",
     "iopub.status.busy": "2025-09-15T13:13:43.477340Z",
     "iopub.status.idle": "2025-09-15T13:13:43.567407Z",
     "shell.execute_reply": "2025-09-15T13:13:43.566276Z"
    },
    "papermill": {
     "duration": 0.09511,
     "end_time": "2025-09-15T13:13:43.569164",
     "exception": false,
     "start_time": "2025-09-15T13:13:43.474054",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_full.dropna(axis = 0, subset = [\"BeatsPerMinute\"], inplace = True)\n",
    "y = X_full.BeatsPerMinute\n",
    "X_full.drop([\"BeatsPerMinute\"], axis = 1, inplace = True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "255ab304",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:13:43.575596Z",
     "iopub.status.busy": "2025-09-15T13:13:43.575160Z",
     "iopub.status.idle": "2025-09-15T13:13:43.675194Z",
     "shell.execute_reply": "2025-09-15T13:13:43.673893Z"
    },
    "papermill": {
     "duration": 0.105143,
     "end_time": "2025-09-15T13:13:43.676940",
     "exception": false,
     "start_time": "2025-09-15T13:13:43.571797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_train, x_valid, y_train , y_valid = train_test_split(X_full, y, train_size = 0.8, test_size = 0.2, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a6fcbc35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T13:13:43.683037Z",
     "iopub.status.busy": "2025-09-15T13:13:43.682733Z",
     "iopub.status.idle": "2025-09-15T14:36:18.161778Z",
     "shell.execute_reply": "2025-09-15T14:36:18.160626Z"
    },
    "papermill": {
     "duration": 4954.486398,
     "end_time": "2025-09-15T14:36:18.165898",
     "exception": false,
     "start_time": "2025-09-15T13:13:43.679500",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-09-15 13:13:44,252] A new study created in memory with name: no-name-6097b745-1222-4e85-af42-c2f42bdbb029\n",
      "[I 2025-09-15 13:15:13,048] Trial 0 finished with value: 0.23520493156168218 and parameters: {'max_depth': 2, 'learning_rate': 0.0008757220596618098, 'n_estimators': 2624, 'min_child_weight': 5, 'colsample_bytree': 0.8233398125466476, 'subsample': 0.24809617564364325, 'reg_alpha': 42.52977174570799, 'reg_lambda': 0.00745845020851831}. Best is trial 0 with value: 0.23520493156168218.\n",
      "[I 2025-09-15 13:25:13,124] Trial 1 finished with value: 0.2351972289446508 and parameters: {'max_depth': 8, 'learning_rate': 0.0001921658111114322, 'n_estimators': 6487, 'min_child_weight': 10, 'colsample_bytree': 0.4406510511350666, 'subsample': 0.7916202897507028, 'reg_alpha': 0.03211992918488003, 'reg_lambda': 0.0016416393012549393}. Best is trial 1 with value: 0.2351972289446508.\n",
      "[I 2025-09-15 13:32:09,296] Trial 2 finished with value: 0.235187326559378 and parameters: {'max_depth': 8, 'learning_rate': 0.0007067724785112841, 'n_estimators': 4415, 'min_child_weight': 7, 'colsample_bytree': 0.5454163036729465, 'subsample': 0.6205204424567072, 'reg_alpha': 0.00018907890247793962, 'reg_lambda': 2.3301662514763293}. Best is trial 2 with value: 0.235187326559378.\n",
      "[I 2025-09-15 13:32:54,326] Trial 3 finished with value: 0.23517382776472429 and parameters: {'max_depth': 2, 'learning_rate': 0.006744955481882879, 'n_estimators': 1385, 'min_child_weight': 5, 'colsample_bytree': 0.9152902804446887, 'subsample': 0.2738897582894924, 'reg_alpha': 3.0905916069549475, 'reg_lambda': 0.007575680244392661}. Best is trial 3 with value: 0.23517382776472429.\n",
      "[I 2025-09-15 13:36:33,001] Trial 4 finished with value: 0.2351843157453931 and parameters: {'max_depth': 9, 'learning_rate': 0.0014019396728409937, 'n_estimators': 1523, 'min_child_weight': 7, 'colsample_bytree': 0.8868046723636911, 'subsample': 0.5423793855479773, 'reg_alpha': 1.8538486326727257, 'reg_lambda': 0.0008667771294316342}. Best is trial 3 with value: 0.23517382776472429.\n",
      "[I 2025-09-15 13:42:01,250] Trial 5 finished with value: 0.23519743351906422 and parameters: {'max_depth': 4, 'learning_rate': 0.0022312938147660013, 'n_estimators': 6609, 'min_child_weight': 5, 'colsample_bytree': 0.2650661081693563, 'subsample': 0.5570366088558536, 'reg_alpha': 8.099686207330333, 'reg_lambda': 0.06530970572777395}. Best is trial 3 with value: 0.23517382776472429.\n",
      "[I 2025-09-15 13:45:59,012] Trial 6 finished with value: 0.23519147451736822 and parameters: {'max_depth': 3, 'learning_rate': 0.00010516898384737361, 'n_estimators': 6414, 'min_child_weight': 5, 'colsample_bytree': 0.9013853269861851, 'subsample': 0.9386709666768207, 'reg_alpha': 2.156005592700741, 'reg_lambda': 2.61979423985797}. Best is trial 3 with value: 0.23517382776472429.\n",
      "[I 2025-09-15 13:51:32,831] Trial 7 finished with value: 0.2351963591671596 and parameters: {'max_depth': 5, 'learning_rate': 0.0004767419457452269, 'n_estimators': 6096, 'min_child_weight': 6, 'colsample_bytree': 0.26553606106035316, 'subsample': 0.5485586265928613, 'reg_alpha': 0.0377426550413834, 'reg_lambda': 0.0034090115051238047}. Best is trial 3 with value: 0.23517382776472429.\n",
      "[I 2025-09-15 13:54:53,975] Trial 8 finished with value: 0.23535226332586787 and parameters: {'max_depth': 7, 'learning_rate': 0.0056713194148156655, 'n_estimators': 2452, 'min_child_weight': 7, 'colsample_bytree': 0.650132201893106, 'subsample': 0.5017931664320983, 'reg_alpha': 0.012624576448852443, 'reg_lambda': 16.6745064617014}. Best is trial 3 with value: 0.23517382776472429.\n",
      "[I 2025-09-15 13:58:06,628] Trial 9 finished with value: 0.23526255970931292 and parameters: {'max_depth': 2, 'learning_rate': 0.01495925177952963, 'n_estimators': 6111, 'min_child_weight': 9, 'colsample_bytree': 0.8111264050929787, 'subsample': 0.4345271917667713, 'reg_alpha': 0.00014041120977456418, 'reg_lambda': 0.0021695315994135307}. Best is trial 3 with value: 0.23517382776472429.\n",
      "[I 2025-09-15 14:03:00,450] Trial 10 finished with value: 0.24543304369930352 and parameters: {'max_depth': 6, 'learning_rate': 0.08179873598339375, 'n_estimators': 3983, 'min_child_weight': 1, 'colsample_bytree': 0.9746957855113653, 'subsample': 0.23137069759251772, 'reg_alpha': 0.36335120574705093, 'reg_lambda': 0.07357653791418194}. Best is trial 3 with value: 0.23517382776472429.\n",
      "[I 2025-09-15 14:06:12,389] Trial 11 finished with value: 0.23545976490186288 and parameters: {'max_depth': 10, 'learning_rate': 0.006525039492457373, 'n_estimators': 1120, 'min_child_weight': 3, 'colsample_bytree': 0.6935639025446704, 'subsample': 0.35305636937144, 'reg_alpha': 0.8834094472104103, 'reg_lambda': 0.00015591251687724453}. Best is trial 3 with value: 0.23517382776472429.\n",
      "[I 2025-09-15 14:07:41,232] Trial 12 finished with value: 0.23520712324366938 and parameters: {'max_depth': 10, 'learning_rate': 0.031091994426164345, 'n_estimators': 1397, 'min_child_weight': 3, 'colsample_bytree': 0.9935359812707636, 'subsample': 0.7267971504652221, 'reg_alpha': 89.3030941257267, 'reg_lambda': 0.00018274295324499857}. Best is trial 3 with value: 0.23517382776472429.\n",
      "[I 2025-09-15 14:13:48,860] Trial 13 finished with value: 0.23522436825867732 and parameters: {'max_depth': 9, 'learning_rate': 0.0016583136210343824, 'n_estimators': 2780, 'min_child_weight': 8, 'colsample_bytree': 0.7938328528018551, 'subsample': 0.3646612483212846, 'reg_alpha': 6.948233786051417, 'reg_lambda': 0.011764779589642954}. Best is trial 3 with value: 0.23517382776472429.\n",
      "[I 2025-09-15 14:21:21,258] Trial 14 finished with value: 0.23552323334002254 and parameters: {'max_depth': 5, 'learning_rate': 0.005522090287830862, 'n_estimators': 7980, 'min_child_weight': 3, 'colsample_bytree': 0.8795416340897784, 'subsample': 0.6653451067624326, 'reg_alpha': 0.2428541461927016, 'reg_lambda': 0.0006255432976454876}. Best is trial 3 with value: 0.23517382776472429.\n",
      "[I 2025-09-15 14:23:39,733] Trial 15 finished with value: 0.2359457875601106 and parameters: {'max_depth': 7, 'learning_rate': 0.021307040234443048, 'n_estimators': 1818, 'min_child_weight': 8, 'colsample_bytree': 0.7116070428990913, 'subsample': 0.8677238143926502, 'reg_alpha': 0.006131792068916415, 'reg_lambda': 0.02582263381061782}. Best is trial 3 with value: 0.23517382776472429.\n",
      "[I 2025-09-15 14:26:55,783] Trial 16 finished with value: 0.23517327913604166 and parameters: {'max_depth': 4, 'learning_rate': 0.00174856246492164, 'n_estimators': 3648, 'min_child_weight': 4, 'colsample_bytree': 0.9180454820193582, 'subsample': 0.3340430955705323, 'reg_alpha': 12.199343700271838, 'reg_lambda': 0.37917700360257917}. Best is trial 16 with value: 0.23517327913604166.\n",
      "[I 2025-09-15 14:29:26,436] Trial 17 finished with value: 0.23521772991332632 and parameters: {'max_depth': 3, 'learning_rate': 0.011678447170313098, 'n_estimators': 3459, 'min_child_weight': 1, 'colsample_bytree': 0.5061438861041887, 'subsample': 0.32397158259500713, 'reg_alpha': 18.68719683518603, 'reg_lambda': 0.6268641940643226}. Best is trial 16 with value: 0.23517327913604166.\n",
      "[I 2025-09-15 14:34:02,852] Trial 18 finished with value: 0.23627571110080287 and parameters: {'max_depth': 4, 'learning_rate': 0.051382662700166885, 'n_estimators': 5244, 'min_child_weight': 4, 'colsample_bytree': 0.7529511964807898, 'subsample': 0.2107155071484657, 'reg_alpha': 6.2494176417884075, 'reg_lambda': 96.26672678286297}. Best is trial 16 with value: 0.23517327913604166.\n",
      "[I 2025-09-15 14:36:18,157] Trial 19 finished with value: 0.2351833180608142 and parameters: {'max_depth': 3, 'learning_rate': 0.0038985274386286895, 'n_estimators': 3450, 'min_child_weight': 2, 'colsample_bytree': 0.3746103746724936, 'subsample': 0.42982486308248524, 'reg_alpha': 0.0010465192845542088, 'reg_lambda': 0.36163287944698924}. Best is trial 16 with value: 0.23517327913604166.\n"
     ]
    }
   ],
   "source": [
    "import optuna\n",
    "\n",
    "def objective(trial):\n",
    "    xgb_params = dict(\n",
    "        max_depth=trial.suggest_int(\"max_depth\", 2, 10),\n",
    "        learning_rate=trial.suggest_float(\"learning_rate\", 1e-4, 1e-1, log=True),\n",
    "        n_estimators=trial.suggest_int(\"n_estimators\", 1000, 8000),\n",
    "        min_child_weight=trial.suggest_int(\"min_child_weight\", 1, 10),\n",
    "        colsample_bytree=trial.suggest_float(\"colsample_bytree\", 0.2, 1.0),\n",
    "        subsample=trial.suggest_float(\"subsample\", 0.2, 1.0),\n",
    "        reg_alpha=trial.suggest_float(\"reg_alpha\", 1e-4, 1e2, log=True),\n",
    "        reg_lambda=trial.suggest_float(\"reg_lambda\", 1e-4, 1e2, log=True),\n",
    "    )\n",
    "    xgb = XGBRegressor(**xgb_params)\n",
    "    #return None\n",
    "    return score_dataset(x_train, y_train, xgb)\n",
    "\n",
    "study = optuna.create_study(direction=\"minimize\")\n",
    "study.optimize(objective, n_trials=20)\n",
    "xgb_params = study.best_params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ab4db4d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T14:36:18.175316Z",
     "iopub.status.busy": "2025-09-15T14:36:18.174941Z",
     "iopub.status.idle": "2025-09-15T14:37:02.585004Z",
     "shell.execute_reply": "2025-09-15T14:37:02.584188Z"
    },
    "papermill": {
     "duration": 44.417497,
     "end_time": "2025-09-15T14:37:02.586995",
     "exception": false,
     "start_time": "2025-09-15T14:36:18.169498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.impute import SimpleImputer\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "\n",
    "num_transformer = SimpleImputer(strategy = \"mean\")\n",
    "\n",
    "preprocess = ColumnTransformer(transformers = [(\"num\", num_transformer, x_train.columns)])\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#estimators = 1000\n",
    "#learning_rate = 0.01\n",
    "\n",
    "\n",
    "'''\n",
    "xgb_params = dict(\n",
    "    max_depth=6,           # maximum depth of each tree - try 2 to 10\n",
    "    learning_rate=0.01,    # effect of each tree - try 0.0001 to 0.1\n",
    "    n_estimators=1000,     # number of trees (that is, boosting rounds) - try 1000 to 8000\n",
    "    min_child_weight=1,    # minimum number of houses in a leaf - try 1 to 10\n",
    "    colsample_bytree=0.7,  # fraction of features (columns) per tree - try 0.2 to 1.0\n",
    "    subsample=0.7,         # fraction of instances (rows) per tree - try 0.2 to 1.0\n",
    "    reg_alpha=0.5,         # L1 regularization (like LASSO) - try 0.0 to 10.0\n",
    "    reg_lambda=1.0,        # L2 regularization (like Ridge) - try 0.0 to 10.0\n",
    "    num_parallel_tree=1,   # set > 1 for boosted random forests\n",
    ")'''\n",
    "\n",
    "\n",
    "my_model = XGBRegressor(**xgb_params)\n",
    "\n",
    "\n",
    "model = Pipeline(steps = [(\"preprocess\", preprocess), (\"model\", my_model )])\n",
    "\n",
    "model.fit(x_train, y_train)\n",
    "\n",
    "preds = model.predict(x_valid)\n",
    "\n",
    "mae = mean_absolute_error(preds, y_valid)\n",
    "\n",
    "#print(f\"Mae: {mae}, Estimator = {estimators}, learning rate = {learn_rate}\")\n",
    "\n",
    "#Mae: 21.187070066472046, Estimator = 4000, learning rate = 0.001\n",
    "\n",
    "#Mae: 21.30098858285947, Estimator = 10000, learning rate = 0.01 (Removed mood score)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4fcc3b8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-15T14:37:02.595565Z",
     "iopub.status.busy": "2025-09-15T14:37:02.595250Z",
     "iopub.status.idle": "2025-09-15T14:37:06.905237Z",
     "shell.execute_reply": "2025-09-15T14:37:06.904024Z"
    },
    "papermill": {
     "duration": 4.316245,
     "end_time": "2025-09-15T14:37:06.907136",
     "exception": false,
     "start_time": "2025-09-15T14:37:02.590891",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "final_preds = model.predict(X_test_full)\n",
    "\n",
    "output = pd.DataFrame({'id': X_test_full.index,\n",
    "                       'BeatsPerMinute': final_preds})\n",
    "output.to_csv('submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 13345277,
     "sourceId": 91720,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5015.926721,
   "end_time": "2025-09-15T14:37:07.838900",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-15T13:13:31.912179",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
